foreign type objc_selector {}
foreign type objc_class {}
foreign func objc_msgSend(_ class: *Int8, _ sel: *objc_selector, _: ...) -> *Int8
foreign func objc_getClass(_: *Int8) -> *objc_class
foreign func class_getName(_: *objc_class) -> *Int8
foreign func class_addMethod(_: *objc_class, _: *objc_selector, _: (*Int8, *objc_selector) -> Void)
foreign func sel_registerName(_: *Int8) -> *objc_selector

type ObjCBox {
  var obj: *Int8
  func send(_ message: *Int8) -> ObjCBox {
    return ObjCBox(obj: objc_msgSend(self.obj, sel_registerName(message)))
  }
  func send(_ message: *Int8, _ arg: *Int8) -> ObjCBox {
    return ObjCBox(obj: objc_msgSend(self.obj, sel_registerName(message), arg))
  }
  func send(_ message: *Int8, _ arg: *Int8, _ arg2: *Int8) -> ObjCBox {
    return ObjCBox(obj: objc_msgSend(self.obj, sel_registerName(message), arg, arg2))
  }
  func send(_ message: *Int8, _ arg: *Int8, _ arg2: *Int8, _ arg3: *Int8) -> ObjCBox {
    return ObjCBox(obj: objc_msgSend(self.obj, sel_registerName(message), arg, arg2, arg3))
  }
  func send(_ message: *Int8, _ arg: ObjCBox) -> ObjCBox {
    return ObjCBox(obj: objc_msgSend(self.obj, sel_registerName(message), arg.obj))
  }
  func send(_ message: *Int8, _ arg: ObjCBox, _ arg2: ObjCBox) -> ObjCBox {
    return ObjCBox(obj: objc_msgSend(self.obj, sel_registerName(message), arg.obj, arg2.obj))
  }
  func send(_ message: *Int8, _ arg: ObjCBox, _ arg2: ObjCBox, _ arg3: ObjCBox) -> ObjCBox {
    return ObjCBox(obj: objc_msgSend(self.obj, sel_registerName(message), arg.obj, arg2.obj, arg3.obj))
  }

  func new() -> ObjCBox {
    return self.send("new")
  }
  func alloc() -> ObjCBox {
    return self.send("alloc")
  }
  func retain() -> ObjCBox {
    return self.send("retain")
  }
  func release() -> ObjCBox {
    return self.send("release")
  }
  func autorelease() -> ObjCBox {
    return self.send("autorelease")
  }

  func add(_ sel: *Int8, _ fun: (*Int8, *objc_selector) -> Void) {
    class_addMethod(self.obj as *objc_class, sel_registerName(sel), fun)
  }

  func printRetainCount() {
    var count = self.send("retainCount")
    var description = self.send("description")
    printf("%s -> retain count: %d\n", description.send("UTF8String"), count)
    description.release()
  }
}

func print(_ string: ObjCBox) {
  printf("%s\n", string.send("UTF8String"))
}

func print(_ str: *Int8) {
  printf("%s\n", str)
}

func Class(_ name: *Int8) -> ObjCBox {
  return ObjCBox(obj: objc_getClass(name) as *Int8)
}


var NSString = Class("NSString")

func str(_ s: *Int8) -> ObjCBox {
  return NSString.send("stringWithUTF8String:", s)
}

var counter = 0

func printStringDescription(_ obj: *Int8, _ sel: *objc_selector) {
  if counter == 10 {
    printf("Called from ObjC!\nString: ")
    print(ObjCBox(obj: obj))
    printf("Current stack trace:\n")
    print(Class("NSThread").send("callStackSymbols").send("componentsJoinedByString:", str("\n")))
    return
  }
  counter += 1
  ObjCBox(obj: obj).send("printDescription")
}

func main() {
  NSString.add("printDescription", printStringDescription)
  var s = str("hello, world")
  s.send("printDescription")
}

